generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model letra {
  id                              Int            @id @default(autoincrement())
  estilo_id                       Int
  name                            String         @unique @db.VarChar(255)
  verses                          String[]
  comment                         String?
  user_create_id                  Int
  user_update_id                  Int?
  created_at                      DateTime?      @db.Timestamp(6)
  updated_at                      DateTime?      @db.Timestamp(6)
  estilo                          estilo         @relation(fields: [estilo_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_letra_user_create_idTouser user           @relation("letra_user_create_idTouser", fields: [user_create_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_letra_user_update_idTouser user?          @relation("letra_user_update_idTouser", fields: [user_update_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  letra_artist                    letra_artist[]

  @@index([estilo_id], map: "idx_letra_estilo_id")
  @@index([name], map: "unique_letra_estilo_name")
}

model letra_artist {
  id                                     Int       @id @default(autoincrement())
  name                                   String    @unique @db.VarChar(255)
  letra_id                               Int
  artist_id                              Int
  recording_url                          String?   @db.VarChar(255)
  year                                   Int?
  user_create_id                         Int
  user_update_id                         Int?
  created_at                             DateTime? @db.Timestamp(6)
  updated_at                             DateTime? @db.Timestamp(6)
  artist                                 artist    @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  letra                                  letra     @relation(fields: [letra_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_letra_artist_user_create_idTouser user      @relation("letra_artist_user_create_idTouser", fields: [user_create_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_letra_artist_user_update_idTouser user?     @relation("letra_artist_user_update_idTouser", fields: [user_update_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([letra_id, artist_id], map: "unique_letra_artist")
  @@index([artist_id], map: "idx_letra_artist_artist_id")
  @@index([letra_id], map: "idx_letra_artist_letra_id")
}

model palo {
  id                             Int           @id @default(autoincrement())
  name                           String        @unique @db.VarChar(255)
  origin                         String        @db.VarChar(255)
  origin_date                    DateTime      @db.Timestamp(6)
  user_create_id                 Int
  user_update_id                 Int?
  created_at                     DateTime?     @db.Timestamp(6)
  updated_at                     DateTime?     @db.Timestamp(6)
  user_palo_user_create_idTouser user          @relation("palo_user_create_idTouser", fields: [user_create_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_palo_user_update_idTouser user?         @relation("palo_user_update_idTouser", fields: [user_update_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  palo_estilo                    palo_estilo[]

  @@index([name], map: "unique_palo_name")
}

model palo_estilo {
  id                                    Int       @id @default(autoincrement())
  name                                  String    @unique @db.VarChar(255)
  palo_id                               Int
  estilo_id                             Int
  user_create_id                        Int
  user_update_id                        Int?
  created_at                            DateTime? @db.Timestamp(6)
  updated_at                            DateTime? @db.Timestamp(6)
  estilo                                estilo    @relation(fields: [estilo_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  palo                                  palo      @relation(fields: [palo_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_palo_estilo_user_create_idTouser user      @relation("palo_estilo_user_create_idTouser", fields: [user_create_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_palo_estilo_user_update_idTouser user?     @relation("palo_estilo_user_update_idTouser", fields: [user_update_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([palo_id, estilo_id], map: "unique_palo_estilo")
  @@index([estilo_id], map: "idx_palo_estilo_estilo_id")
  @@index([palo_id], map: "idx_palo_estilo_palo_id")
}

model artist {
  id                               Int            @id @default(autoincrement())
  name                             String         @unique @db.VarChar(255)
  birth_year                       Int?
  death_year                       Int?
  origin                           String?        @db.VarChar(255)
  type                             artisttype
  user_create_id                   Int
  user_update_id                   Int?
  created_at                       DateTime?      @db.Timestamp(6)
  updated_at                       DateTime?      @db.Timestamp(6)
  user_artist_user_create_idTouser user           @relation("artist_user_create_idTouser", fields: [user_create_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_artist_user_update_idTouser user?          @relation("artist_user_update_idTouser", fields: [user_update_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  letra_artist                     letra_artist[]

  @@index([name], map: "unique_artist_name")
}

model estilo {
  id                               Int           @id @default(autoincrement())
  name                             String        @unique @db.VarChar(255)
  structure                        String        @db.VarChar(255)
  origin                           String        @db.VarChar(255)
  user_create_id                   Int
  user_update_id                   Int?
  created_at                       DateTime?     @db.Timestamp(6)
  updated_at                       DateTime?     @db.Timestamp(6)
  user_estilo_user_create_idTouser user          @relation("estilo_user_create_idTouser", fields: [user_create_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_estilo_user_update_idTouser user?         @relation("estilo_user_update_idTouser", fields: [user_update_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  letra                            letra[]
  palo_estilo                      palo_estilo[]

  @@index([name], map: "unique_estilo_name")
}

model user {
  id                                             Int            @id @default(autoincrement())
  email                                          String         @unique @db.VarChar(255)
  password                                       String         @db.VarChar(255)
  role                                           role?          @default(USER)
  created_at                                     DateTime?      @db.Timestamp(6)
  updated_at                                     DateTime?      @db.Timestamp(6)
  artist_artist_user_create_idTouser             artist[]       @relation("artist_user_create_idTouser")
  artist_artist_user_update_idTouser             artist[]       @relation("artist_user_update_idTouser")
  estilo_estilo_user_create_idTouser             estilo[]       @relation("estilo_user_create_idTouser")
  estilo_estilo_user_update_idTouser             estilo[]       @relation("estilo_user_update_idTouser")
  feedback                                       feedback[]
  letra_letra_user_create_idTouser               letra[]        @relation("letra_user_create_idTouser")
  letra_letra_user_update_idTouser               letra[]        @relation("letra_user_update_idTouser")
  letra_artist_letra_artist_user_create_idTouser letra_artist[] @relation("letra_artist_user_create_idTouser")
  letra_artist_letra_artist_user_update_idTouser letra_artist[] @relation("letra_artist_user_update_idTouser")
  palo_palo_user_create_idTouser                 palo[]         @relation("palo_user_create_idTouser")
  palo_palo_user_update_idTouser                 palo[]         @relation("palo_user_update_idTouser")
  palo_estilo_palo_estilo_user_create_idTouser   palo_estilo[]  @relation("palo_estilo_user_create_idTouser")
  palo_estilo_palo_estilo_user_update_idTouser   palo_estilo[]  @relation("palo_estilo_user_update_idTouser")

  @@index([email], map: "unique_user_email")
}

model feedback {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  email      String?   @db.VarChar(255)
  comment    String?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  user       user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "idx_feedback_user_id")
}

enum artisttype {
  CANTE
  GUITARRA
  BAILE
}

enum keys {
  A
  Bb
  B
  C
  Db
  D
  Eb
  E
  F
  Gb
  G
  Ab
}

enum tonalities {
  LOCRIO
  FRIGIO
  MENOR
  DORICO
  MXIOLIDIO
  MAYOR
  LIDIO
}

enum role {
  MASTER
  ADMIN
  USER
}
